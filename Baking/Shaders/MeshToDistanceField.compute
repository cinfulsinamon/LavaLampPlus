#pragma kernel CSMain

float3 _MinCorner;
float _PixelSize;
float3 _TextureDimensions;

int _NumTriangles;
int _TriangleOffset;
float3 _PixelOffset;

StructuredBuffer<float3> _MeshVerts;

RWTexture3D<float> _Output;

//closest point on a triangle via: https://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistPointTriangle.h

void GetMinEdge02(float a11, float b1, out float2 p)
{
    p[0] = 0.0;
    if (b1 >= 0.0)
    {
        p[1] = 0.0;
    }
    else if (a11 + b1 <= 0.0)
    {
        p[1] = 1.0;
    }
    else
    {
        p[1] = -b1 / a11;
    }
}

void GetMinEdge12(float a01, float a11, float b1, float f10, float f01, out float2 p)
{
    float h0 = a01 + b1 - f10;
    if (h0 >= 0.0)
    {
        p[1] = 0.0;
    }
    else
    {
        float h1 = a11 + b1 - f01;
        if (h1 <= 0.0)
        {
            p[1] = 1.0;
        }
        else
        {
            p[1] = h0 / (h0 - h1);
        }
    }
    p[0] = 1.0 - p[1];
}

void GetMinInterior(float2 p0, float h0, float2 p1, float h1, out float2 p)
{
    float z = h0 / (h0 - h1);
    p = (1.0 - z) * p0 + z * p1;
}


float DistanceToTriangle(float3 position, uint triangleIndex)
{
    float3 pointA = _MeshVerts[triangleIndex * 3];
    float3 pointB = _MeshVerts[(triangleIndex * 3) + 1];
    float3 pointC = _MeshVerts[(triangleIndex * 3) + 2];
    
    float3 diff = position - pointA;
    float3 edge0 = pointB - pointA;
    float3 edge1 = pointC - pointA;
    float a00 = dot(edge0, edge0);
    float a01 = dot(edge0, edge1);
    float a11 = dot(edge1, edge1);
    float b0 = -dot(diff, edge0);
    float b1 = -dot(diff, edge1);

    float f00 = b0;
    float f10 = b0 + a00;
    float f01 = b0 + a01;

    float2 p0, p1, p;
    float dt1, h0, h1;

    // Compute the endpoints p0 and p1 of the segment. The segment is
    // parameterized by L(z) = (1-z)*p0 + z*p1 for z in [0,1] and the
    // directional derivative of half the quadratic on the segment is
    // H(z) = Dot(p1-p0,gradient[Q](L(z))/2), where gradient[Q]/2 =
    // (F,G). By design, F(L(z)) = 0 for cases (2), (4), (5), and (6).
    // Cases (1) and (3) can correspond to no-intersection or
    // intersection of F = 0 with the triangle.
    if (f00 >= 0.0)
    {
        if (f01 >= 0.0)
        {
            // (1) p0 = (0,0), p1 = (0,1), H(z) = G(L(z))
            GetMinEdge02(a11, b1, p);
        }
        else
        {
            // (2) p0 = (0,t10), p1 = (t01,1-t01),
            // H(z) = (t11 - t10)*G(L(z))
            p0[0] = 0.0;
            p0[1] = f00 / (f00 - f01);
            p1[0] = f01 / (f01 - f10);
            p1[1] = 1.0 - p1[0];
            dt1 = p1[1] - p0[1];
            h0 = dt1 * (a11 * p0[1] + b1);
            if (h0 >= 0.0)
            {
                GetMinEdge02(a11, b1, p);
            }
            else
            {
                h1 = dt1 * (a01 * p1[0] + a11 * p1[1] + b1);
                if (h1 <= 0.0)
                {
                    GetMinEdge12(a01, a11, b1, f10, f01, p);
                }
                else
                {
                    GetMinInterior(p0, h0, p1, h1, p);
                }
            }
        }
    }
    else if (f01 <= 0.0)
    {
        if (f10 <= 0.0)
        {
            // (3) p0 = (1,0), p1 = (0,1),
            // H(z) = G(L(z)) - F(L(z))
            GetMinEdge12(a01, a11, b1, f10, f01, p);
        }
        else
        {
            // (4) p0 = (t00,0), p1 = (t01,1-t01), H(z) = t11*G(L(z))
            p0[0] = f00 / (f00 - f10);
            p0[1] = 0.0;
            p1[0] = f01 / (f01 - f10);
            p1[1] = 1.0 - p1[0];
            h0 = p1[1] * (a01 * p0[0] + b1);
            if (h0 >= 0.0)
            {
                p = p0; // GetMinEdge01
            }
            else
            {
                h1 = p1[1] * (a01 * p1[0] + a11 * p1[1] + b1);
                if (h1 <= 0.0)
                {
                    GetMinEdge12(a01, a11, b1, f10, f01, p);
                }
                else
                {
                    GetMinInterior(p0, h0, p1, h1, p);
                }
            }
        }
    }
    else if (f10 <= 0.0)
    {
        // (5) p0 = (0,t10), p1 = (t01,1-t01),
        // H(z) = (t11 - t10)*G(L(z))
        p0[0] = 0.0;
        p0[1] = f00 / (f00 - f01);
        p1[0] = f01 / (f01 - f10);
        p1[1] = 1.0 - p1[0];
        dt1 = p1[1] - p0[1];
        h0 = dt1 * (a11 * p0[1] + b1);
        if (h0 >= 0.0)
        {
            GetMinEdge02(a11, b1, p);
        }
        else
        {
            h1 = dt1 * (a01 * p1[0] + a11 * p1[1] + b1);
            if (h1 <= 0.0)
            {
                GetMinEdge12(a01, a11, b1, f10, f01, p);
            }
            else
            {
                GetMinInterior(p0, h0, p1, h1, p);
            }
        }
    }
    else
    {
        // (6) p0 = (t00,0), p1 = (0,t11), H(z) = t11*G(L(z))
        p0[0] = f00 / (f00 - f10);
        p0[1] = 0.0;
        p1[0] = 0.0;
        p1[1] = f00 / (f00 - f01);
        h0 = p1[1] * (a01 * p0[0] + b1);
        if (h0 >= 0.0)
        {
            p = p0; // GetMinEdge01
        }
        else
        {
            h1 = p1[1] * (a11 * p1[1] + b1);
            if (h1 <= 0.0)
            {
                GetMinEdge02(a11, b1, p);
            }
            else
            {
                GetMinInterior(p0, h0, p1, h1, p);
            }
        }
    }
    
    float3 closestPoint = pointA + p[0] * edge0 + p[1] * edge1;
    float distance = length(position - closestPoint);

    return max(0.0, distance);
}

[numthreads(4, 4, 4)]
void CSMain(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    int3 targetPixel = dispatchThreadID + _PixelOffset;
    
    if (any(targetPixel >= _TextureDimensions))
    {
        return;
    }
    
    float3 pixelPosition = _MinCorner + ((targetPixel + 0.5) * _PixelSize);

    //on the first iteration set the distance to be arbitrarily far away, otherwise get the closest distance from the last iteration
    float signedDistance = (_TriangleOffset == 0) ? -10000000.0 : _Output[targetPixel];
    
    for (int triangleIndex = 0; triangleIndex < _NumTriangles; triangleIndex++)
    {
        //negate the distance, when we convert to signed distance the outside pixels will be flipped to positive
        float distanceToTri = -DistanceToTriangle(pixelPosition, triangleIndex + _TriangleOffset);

        //because distance is negative this is actually choosing the closest distance
        signedDistance = max(signedDistance, distanceToTri);
    }
    
    _Output[targetPixel] = signedDistance;
}
